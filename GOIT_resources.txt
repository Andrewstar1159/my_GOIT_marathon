  

 https://www.figma.com/file/SyT3l0N5kdSSPGoEd3hLdo/Resume-(Copy)

 конспект від GOIT:  https://goit.global/textbooks/marathons/html-css/uk/docs/doc-structure
 
 Документація або довідник HMTL тегів:  https://htmlreference.io/
 
 Довідник CSS властивостей:  https://cssreference.io/

 Мнемоніки  https://dev.w3.org/html5/html-author/charref

 Squoosh для оптимізації растрової графіки  https://squoosh.app/
 
 SVGOMG для оптимізації векторної графіки  https://jakearchibald.github.io/svgomg/

 онлайн валидатор  https://validator.w3.org/nu/


 * Специфікація HTML: https://html.spec.whatwg.org/multipage/


 в HTML комментиарии обозначаются !<-- -->

 CSS комментарии обозначаются как /* */


 Селектор показывает, к каким тегам применяется свойства из CSS-правила. 
 Проще всего работают селекторы по тегам: они выбирают все теги с подходящими именами.
 p { color: red; }   вбиирает все теги с именем <р>

  селектор {
    свойство: значение;
    свойство: значение;
 }
 
 
 Селектор по классу начинаетя с точки, за которой следует имя класса:
 .advantages-item {...}
 

 * Миксование классов - использование нескольких классов. (чтобы сократить дублирование кода)
 Обычно в один класс вносят общее оформление, 
 а в дополнительных классах описывают его модификации.
 
 
 * HTML - HyperText Markup Language (мова розмітки гіпертексту) - набір правил, 
 для структурування (розмітки) текстової інформації, додавання зображень,
 створення таблиць, форм, списків і т.д.

 * HTML-документ - тестовий файл з розширенням .html . Документ, 
 розмічений за допомогою HTML, інтерпретується браузером, 
 в результаті чого користувачі бачать НЕ вихідний код з елементами розмітки, 
 а підсумковий результат обробки - веб-сторінку.


 * Тег (tag) -елемент мови розмітки гіпертексту. Це найменші будівельні блоки,
 з яких складається будь-яка веб-сторінка. Кожен тег позначає якусь сутність:
 заголовок, список, абзац тексту, зображення.
 Між видкриваючим і закриваючим тегами знаходиться вміст тега - контент.
 <ім'я_тега>...</ім'я_тега>

 * Коментарі:    !<-- якийсь текст коментарю -->
 
 
 * Атрибути - це додаткові налаштування тегів, 
 за допомогою яких можна змінювати властивості і поведінку елемента.
 Атрибути записуються всередині відкриваючого тега, а їх значення 
 розташовуються всередині подвійних лапок. 
 Кілька атрибутів розділяються пропуском.

 деякі атрибути:

  * href - адреса сторінки, на яку перейде користувач 
  при натисканні на текст посилання.
  
  * target - вказує на те, в якій вкладці 
  відкривається сторінка при кліці по посиланню.

  * title - додає підказку до тексту посилання.

  * src - адреса зображення.

  * alt - альтернативний текст, який буде показаний, 
  якщо картинка не завантажиться.


 * Парні теги. 
 Складаються з відкриваючих і закриваючих тегів, які обгортають контент, 
 дозволяючи змінювати його властивості або вiдтворення, групувати за змістом. 
 Всередині парних тегів можуть бути вкладені інші теги, як матрьошка.


 * Поодинокі теги.
 Складаються тільки з відкриваючого тега, не містять текстового контенту 
 і отримують контент або поведінку з атрибутів. 
 Служать для зміни властивостей документа, підключення файлів і т. д.
  

 * Вкладеність тегів
 Алгоритм визначення можливості вкладення тега досить простий.

 - Йдемо в спецификацію і знаходимо потрібний елемент.
 - Перевіряємо контентну модель елемента (Content model), в який вкладаємо.
 - Перевіряємо категорії елемента (Categories), який вкладаємо.
 - Якщо категорія підходить і обмеження не забороняють, 
   то вкладати можна, інакше не можна.

 
 * <!DOCTYPE > - це не тег, а обов'язкова інструкція оголошення 
 типу документа. Вона потрібна для того, щоб повідомити браузеру 
 в якій версії HTML написаний документ.

 * Елементи верхнього рівня призначені для формування основної 
 структури веб-сторінки і визначають розділи заголовка і тіла документа.

  - тег <html>
  Кореневий елемент документа, як контейнер, який містить в собі 
  весь вміст сторінки. Все що знаходиться за його межами, 
  не сприймається браузером як HTML-код і не обробляється.
  Може мати в собі атрибут <lang>, котрий вказує, 
  на якій мові написаний текст сторінки. Це необхіжно 
  для допоміжних технологій, таких як скрінрідери і т.п.

  - тег <head>
  Призначений для зберігання службової інформації про сторінку: заголовок, 
  опис, кодування і т. д. Вся ця інформація не відображається у 
  вікні браузера, однак містить дані, які вказують браузеру 
  як слід обробляти сторінку.

  - тег <body> 
  Містить вміст майбутньої веб-сторінки. Контент, 
  який повинен відображатися на сторінці, слід 
  розташовувати саме всередині цього тега.

 * Заголовок сторінки - тег <title>
 Текст розміщений всередині тега <title> відображається у вкладці браузера. 
  Довжина заголовка повинна бути не більше 60 символів, щоб 
 повністю поміститися в заголовку. Текст заголовка повинен містити 
 короткий опис вмісту веб-сторінки.

 * Метадані 
 тег <meta> використовується для зберігання інформації 
 призначеної для браузера і пошукових систем: установка 
 кодування документа, передача інформації пошуковим системам 
 і багато іншого. Мета-тегів може бути кілька, тому що 
 в залежності від використовуваних атрибутів вони несуть різну інформацію.

 Кодування сторінки необхідно вказати для того, щоб браузер 
 коректно відобразив текст. Якщо цього не зробити, або задати 
 невірне кодування, замість символів браузер може відобразити ієрогліфи.

 мета-теги, які розуміє Google:
 https://developers.google.com/search/docs/advanced/crawling/special-tags?visit_id=637900092204108457-131019965&rd=1


 * Потік документа - це вертикальний і горизонтальний порядок відображення
 елементів на сторінці. поділяються на 
 1) Блоковий елемент (block-level element) - займає весь рядок цілком, 
 не залежно від обсягу його контенту, тому кілька блокових 
 елементів візуально йдуть один за одним зверху вниз.

 2) Рядковий елемент (inline element) - займає місце по своєму вмісту, 
 тому кілька малих елементів можуть розташовуватися на одному рядку. 
   Коли в рядку не вистачає місця для вміщення сатиричного елемента, 
 він переноситься на новий.


 * Семантична розмітка - підхід до створення HTML-розмітки, заснований на 
 використанні тегів відповідно до їх призначення, згідно специфікації і 
 придатним під тип контенту, який розмічується.
   У більшості випадків, семантична розмітка - це просто використання 
 здорового сенсу. При розмітці абзацу тексту ми використовуємо тег <p>, 
 для размітки посилання є тег <a>, контентне зображення представлено 
 тегом <img> і т. д.

 
 	Розмітка тексту
 * Абзац
 тег <p> - універсальний контейнер для угруповання дрібних фразових 
 елементів, відділення їх один від одного, і подальшої стилізації. 
 За замовчуванням абзац - це блоковий елемент, тобто він починається 
 з нового рядка і має вертикальні відступи, які можна буде змінити в CSS.

 * Заголовки 
 група тегів <h1>...<h6> - текстові заголовки смислових розділів різного рівня,
 які вказують на важливості секції контенту, розташованого після них. 
  Тег <h1> найчастіше використовується тільки один раз, 
  як основний заголовок сторінки. Решта заголовків можуть 
  використовуватися скільки завгодно раз, але їх завжди слід 
  застосовувати правильно, дотримуючись ієрархії.
  + Пошукові системи звертають особливу увагу на заголовки, 
    тому коректне використання цієї групи тегів вкрай важливо.


 * Списки
 Списки дозволяють упорядкувати колекції і представити їх в наочному 
 і зручному для користувача вигляді. Список це контейнер, дітьми 
 якого можуть бути тільки елементи списку, теги <li>

   тег <ol> (ordered list) - нумерований (упорядкований) список, тобто 
 кожен елемент списку пронумерований. Браузер нумерує елементи 
 по порядку автоматично і якщо видалити один або кілька елементів 
 такого списку, інші номери будуть автоматично перераховані. 
 Використовується для перерахування дій в певному порядку, наприклад рецепт.

   тег <ul> (unordered list) -  маркований (невпорядкований) список, 
 кожен елемент якого починається з невеликого символу (маркера). 
 За допомогою CSS маркер можна буде прибрати або замінити.
 Використовується для перерахування набору в довільному порядку, 
 наприклад список курортів.

 За специфікацією в теги <ul> і <ol> можна вкладати тільки 
 елементи списку - теги <li>. При цьому, всередині тегів <li>, 
 можуть бути вкладені інші довільні теги.

 * Вкладені списки
 Зробити багаторівневий список просто - вкладаємо в елемент списку 
 ще один перелік. Це часто застосовується для створення 
 багаторівневих меню.

 
 * Посилання
  тег <a> - призначений для створення посилань, тексту, при кліці по якому
 переходимо на іншу сторінку, скачуємо файл і т.п. Текст посилання 
 відображається в браузері з підкресленням, колір шрифту синій, 
 при наведенні на посилання курсор миші змінює вид.
   Адреса посилання задається в обов'язковому атрибуті href="адрес"
 Адреса - це URL,яка може вказувати на сторінку, файл, будь-який ресурс.

  - атрибут target="значение" визначає те, в який вкладці повинен 
 відкриватися документ до якого веде посилання. 
 При значенні _blank сторінка відкривається в новій вкладці браузера.

  - атрибут rel доповнює атрибут href інформацією про відношення 
 між поточним і пов'язаним документом і використовується в парі 
 з target="_blank".


  - атрибут download="ім'я_файлa". повідомляє браузеру, що зазначений 
 ресурс повинен бути не відкритий, а завантажений в момент, коли 
 користувач клацне по посиланню. Значення атрибута задає ім'я файлу, 
 що, тобто можна змінити ім'я під час завантаження. 
 Атрибут можна використовувати без вказівки значення, тоді буде 
 використано ім'я оригінального файлу.


 * Спеціальні значення href
 У посилань є можливість не тільки переходити на інші сторінки 
 і завантажувати файли, але і здійснювати дзвінки на телефони, 
 відправляти повідомлення або дзвонити по скайпу.

 
 * Посилання-якір
 Посилання з якорем використовується для створення навігації по 
 поточній сторінці. Наприклад, для швидкого переходу до якоїсь секції 
 (як у цих матеріалах). При кліці по такому посиланню, браузер 
 проскролить сторінку до якоря, без її перезавантаження.
   Для створення якоря необхідно додати тег, до якого 
 ми хочемо проскролити сторінку, атрибут id - унікальний ідентифікатор. 
 А атрибуту href у посилання задати значення починається з символу #, 
 після якого вказаний ідентифікатор елемента.


 * Кнопка
 Інтерактивний елемент, який пожвавлюється за допомогою JavaScript. 
 Наприклад, кнопка відкриття і закриття спливаючого вікна, 
 перемикання мобільного меню або відправки форми. 
   Необхідно явно вказувати атрибут type.
 Його значення по замовчуванням - submit, але частіше за все 
 потрібно значення button. Так, кнопка типу «кнопка», така особливість. 

 
 * тег <span> універсальний контейнер для дрібного текстового контенту, 
 наприклад окремих слів, частин слів або цілих фраз всередині текстового масиву.
   Аналогічно тегу <div>, не має ніякого семантичного значення 
 і використовується для додаткової стилізації.

 - атрибут lang - Якщо на сторінці є текст на різних мовах, для того 
 щоб зробити її більш доступною для допоміжних технологій, можна 
 задавати атрибут lang не тільки всьому документу, а й окремим тегами.


 * Символьні підстановки
 Не всі символи можна набрати на клавіатурі. Наприклад, символ 
 зареєстрованого торгового знака & reg;, торгової марки & trade;, 
 авторського права & copy;. для введення подібних знаків 
 використовують символьні підстановки.

	Здійснити підстановку можна такими способами
1) &мнемокод; - вставка символу за його «Мнемокод», тобто імені
2) &#КОД10; - вставка символу по його десятичному коду
3) &#xКОД16; - вставка символу по його шістнадцятирічному коду
 
 	Символи < і > це частина синтаксису HTML, 
 відкривають і закривют теги. Тому безпосередня вставка 
 їх в код сторінки призведе до інтерпретації <strong> і </strong> як тегів. 
 У такому випадку замість символів < і > необхідно використовувати 
 символьні підстановки &lt; і &gt;.


 * Тег <img> призначений для розмітки зображень в різних графічних форматах.
  - src="шлях" - обов'язковий атрибут, вказує адресу зображення. 
  Шлях до зображення може бути абсолютним, або відносним.

  - alt="опис" - обов'язковий атрибут, альтернативний опис.
	* В описі повинна бути закінчена, повністю сформована пропозиція.
	* Альтернативний текст повинен відповідати на питання 
	  «Що зображено на малюнку?».
	* Опис повинен бути унікальним і не повторювати те, 
	  що вже є в тексті до цього зображення.
	* В описі не потрібно використовувати слова 
	  «зображення», «картинка» або «ілюстрація», це само собою зрозуміло.
  	
  - width="значення" і height="значення" - задають розміри зображення 
  в пікселях. Без завдання розмірів, зображення відображається 
  на сторінці в оригінальному розмірі. Якщо задати тільки одну величину, 
  браузер автоматично вирахує іншу для збереження пропорцій.
	

 * Зображення посилання
 	Посилання не обов'язково повинна бути з текстовим контентом.
 Дуже часто, особливо в інтернет-магазинах, клік по зображенню 
 товару, в списку товарів, перенаправляє користувача 
 на сторінку цього товару.
 	Для створення зображення-посилання обертаємо тег <img> в посилання.

 * Зображення з підписом
 Таке завдання часто зустрічається в статтях, де багато 
 зображень з поясненням під або над картинкою, наприклад ілюстрації,
 графіки або діаграми. Якщо необхідно розмітити зображення з
 підписом, можна використовувати теги <img> і абзац <p>. 
 Але, саме для таких завдань, є семантичні теги <figure> і <figcaption>.
 
 Всередину <figure> поміщаємо розмітку зображення і описи. 
 Тег <figcaption> обов'язково повинен бути першою або 
 останньою дитиною <figure>.


 * Абсолютний шлях
 вказує точне місце розташування файлу в структурі папок на сервері. 
 Абсолютний шлях дозволяє отримати доступ до файлу зі сторонніх ресурів.

 Абсолютні адреси складаються мінімум з трьох частин: 
 протокол, ім'я сервера і шлях до файлу.
 1) https:// - протокол.
 2) images.pexels.com - ім'я сервера.
 3) /photos/583842/pexels-photo-583842.jpeg — шлях до файлу зображення, 
 де «photos» і «583842» імена папок. Папка «583842» вкладена в «photos».


 * Відносний шлях
 описує шлях до ресурсу щодо поточного файлу. Використовується для складання
 шляхів до зображень, файлів стилів або створення навігації на інші сторінки
 сайту, який ви створюєте.
   Символ / позначає перехід на один рівень нижче. 
 Такий шлях браузер буквально розуміє як: 
 «В папці images, на одному рівні з поточним файлом index.html, 
 взяти файл logo.png».

   У майбутньому необхідно буде підключати зображення в файлі стилів. 
 Для того щоб у файлі styles.css достукатися до зображення логотипу 
 з папки images, необхідно вказати відносний шлях (щодо файла-стилів).

  ../ позначає перехід на одну папку (рівень) вище. 
 Такий шлях браузер буквально розуміє як: «Перейти на одну 
 папку вище (назад), зайти в папку images і взяти в ній файл logo.png».
 

 * Графічні формати
 Векторна графіка буде відображатися однаково добре на звичайних 
 екранах і на екранах з високою піксельною щільністю. 
 Растрова графіка, особливо стисла з втратою якості, буде виглядати розмито.

 * Растрова графіка (raster, bitmap) - опис графічного файлу в  
 вигляді масиву з координатами кожного пікселя і описом 
 кольору цього пікселя. Як карта кольорів з фіксованим розміром.

 Найпопулярніші растрові формати зображень:
  - JPEG - великі файли не потребують прозорого фону або анімації. 
 Цей формат ідеальний для барвистих фотореалістичних фотографій, 
 так як вони можуть містити мільйони кольорів.
  - PNG - на відміну від JPEG, має додатковий параметр для 
 опису прозорості (альфа канал). Підходить для зображень, фон 
 яких повинен бути прозорий або одноколірний. Використовується 
 для іконок і декоративних елементів. Також використовується для 
 зображень підвищеної точності - скріншотів, креслень, графіків і т. п.
  - webP - формат замінює PNG і JPEG, але ще з неповною підтримкою 
 в браузерах. При рівній якості зображення, стислі файли 
 будуть менше PNG і JPEG в середньому на 25%.


 * Векторна графіка (SVG, Scalable Vector Graphics) - описується 
 у вигляді правил або рівнянь, що визначають лінії, а також 
 додаткові властивості, колі ліній і фон для фігур.

 Векторна графіка ідеально підходить для простих масштабованих 
 зображень, займаючи дуже мало місця. Проте, зі зростанням 
 складності зображення, розмір файлу робить використання формату
 SVG невигідним. Векторна графіка замінює PNG і використовується
 для іконок, логотипів, графіків, абстрактної графіки і 
 декоративних елементів.


 * Оптимізація зображень
 потрібно думати про оптимізацію ваги сторінки і використовувати
 спеціальні онлайн-сервіси для стиснення зображень.
	Потрібно пам'ятати, що оптимізація JPEG-файлу веде 
 до втрати якості зображення. Тому, при зменшенні ваги зображення,
 погіршився його зовнішній вигляд. Оптимізація JPEG зводиться до
 пошуку балансу між якістю і вагою зображення.
 	Оптимізація зображення робиться один раз. 
 Експортоване з макету зображення оптимізується і тільки
 після цього додається в проект.

	- Прогресивні JPEG-зображення - це файли зображень в форматі JPEG,
 які були закодовані таким чином, що при відображенні вони
 завантажуються шарами. Прогресивний JPEG виглядає точно так
 само, як і звичайні JPEG-зображення. Різниця в тому, як вони
 відображаються під час завантаження.
	Звичайні JPEG-файли завантажуються і промальовується смугами
 (порядково), зверху вниз. Для користувача це створює ефект поганої
 швидкості завантаження сторінки. Це особливо помітно для великих
 зображень або на мобільних пристроях з поганою швидкістю підключення
 до мережі.
	Прогресивний JPEG завантажується так, що відразу показується
 все зображення, але в поганій якості, і в процесі його завантаження
 якість поступово поліпшується до максимальної.
 З точки зору користувача, прогресивний JPEG забезпечує більш приємний
 досвід відвідування сторінки. Користувач відразу отримує повне уявлення
 про вміст сторінки.
	Для того, щоб зробити прогресивне JPEG-зображення досить
 скористатися спеціальними інструментами, в тому числі онлайн.
 Наприклад, при оптімізіаціі JPEG-зображень в Squoosh, вони за
 умовчанням (автоматично) перетворюються в прогресивні.

 
  * Потоковий вміст
	тег <header> 
 виділяє вступну частину всієї сторінки, складної секції або статті.
 Зазвичай містить логотип, навігацію, вступний текст, складний заголовок.
 Може бути кілька на сторінці.

	тег <footer>
 це фінальна частина всієї сторінки, її розділу або статті.
 Часто містить копірайт, список посилань на соціальні мережі,
 контактну інформацію та так далі. Може бути кілька на сторінці.

	тег <main>
 Основне, що не повторюється на інших сторінках сайту (унікальне),
 зміст. Може бути тільки один на сторінці. 


 * Смислові розділи
	тег <nav>
 Визначає розділ основної навігації з посиланнями на секції поточної
 або інших сторінок. Використовується тільки для основної навігації,
 а не для будь-якої групи посилань в документі.

	тег <article>
 Незалежна, відділена, і має значення поза, частина документа.
 Наприклад пост на форумі, твіт, стаття в блозі, віджет з рекламою,
 інстраграм історія, картка товару в магазині.
  Якщо розділу документа можна дати ім'я, винести його поза сайтом
 і він буде мати сенс - це <article>. Обов'язковий заголовок.

	тег <section>
 Великий розділ об'єднує зміст за змістом. Невіддільний від
 основного документа. Наприклад секція списку товарів, блок особистої
 інформації в профілі користувача, розділ контактної інформації.
 Якщо розділу документа можна дати ім'я, але поза сайтом він не матиме
 сенсу - це <section>. Бажаний заголовок.


	тег <div>
 Універсальний контейнер без семантичного значення.
 Використовується як блок-обгортка для подальшої стилізації контенту.
 Якщо не виходить дати групі контенту осудне ім'я (не "права колонка",
 а те, що має сенс) - це <div> і швидше за все вам просто потрібен
 загальний контейнер для оформлення.


 * Інструменти розробника - вбудований функціонал браузера,
 який дозволяє отримувати інформацію про вихідний код сторінки,
 стилях, мережевих запитах і багато іншого.

 Інструменти розробника можна викликати наступними методами:
 - Натиснувши клавішу F12
 - Комбінацією клавіш Ctrl+Shift+I для Windows
 - Комбінацією клавіш Cmd+Opt+I для MacOS
 - На веб-сторінці натиснути правою кнопкою миші і вибрати пункт
   меню «Переглянути код».

 За замовчуванням в інструментах розробника відкривається вкладка Elements.
 У ній представлена внутрішня HTML-структура документа. При цьому,
 при наведенні курсора миші на певний елемент - він буде підсвічений
 у вікні браузера (viewport).


 
* Валідатор перевіряє такі пункти:

 - Правильне написання тегів.
 - Актуальність тегів і можливість їх застосування в даній версії HTML.
 - Правильність закриття і вкладеності тегів.
 - Правильність використання атрибутів.







	